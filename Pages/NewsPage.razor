@page "/news"
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@using System;
@using System.Linq;
@using System.Text.Json.Serialization;
@using System.Text.Json;

<PageTitle>News Page</PageTitle>

<label>Enter your search term:</label>

@* <input type="text" @bind="searchString" @bind:event="oninput" class="form-control col-3" /> *@

<div>@currentStock?.stockDay</div>

@code {
  HttpClient httpClient = new HttpClient();
  @* public List<Response> res = new List<Response>(); *@

  private Stock? currentStock;
  private string? jsonRes;

  protected override async Task OnInitializedAsync()
  {
    await GetPrices();
  }

  public async Task GetPrices()
  {
    // replace the "demo" apikey below with your own key from https://www.alphavantage.co/support/#api-key
            string QUERY_URL = "https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=IBM&interval=5min&apikey= LRIV8JF6611R73S9";
            Uri queryUri = new Uri(QUERY_URL);
            
            HttpResponseMessage response = await httpClient.GetAsync(queryUri);

            jsonRes = await response.Content.ReadAsStringAsync();

            currentStock = JsonSerializer.Deserialize<Stock>(jsonRes);
            
            Console.WriteLine($"This is data {currentStock?.stockDay}");
    
  }

  public class Stock {
    [JsonPropertyName("Meta Data")]
    [JsonConverter(typeof(InfoToStringConverter))]
    public string? MetaData { get; set; }

    [JsonPropertyName("Time Series (5min)")]
    [JsonConverter(typeof(InfoToStringConverter))]    
    public string? stockDay { get; set; }
}

public class InfoToStringConverter : JsonConverter<string>
{
    public override string Read(
        ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
        using (var jsonDoc = JsonDocument.ParseValue(ref reader))
        {
            return jsonDoc.RootElement.GetRawText();
        }
    }

    public override void Write(
        Utf8JsonWriter writer, string value, JsonSerializerOptions options)
    {
        throw new NotImplementedException();
    }
}


}


