@page "/news"
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@using System;
@using System.Linq;
@using System.Text.Json.Serialization;
@using System.Text.Json;
@using Newtonsoft.Json

@* HTML CONTENT *@
<PageTitle>News Page</PageTitle>

<label>Enter your search term:</label>


@code {
  HttpClient httpClient = new HttpClient();
  private Stock? currentStock;
  private string? jsonRes;

  protected override async Task OnInitializedAsync()
  {
    await GetPrices();
  }

  public async Task GetPrices()
  {
    @* API CALL: Stock Quote for Previous Day *@
    string QUERY_URL =
        "https://api.polygon.io/v2/aggs/ticker/AAPL/prev?adjusted=true&apiKey=WuCRrJx5EwrJBBCjO_9FbpPEagQhdpCF";

    Uri queryUri = new Uri(QUERY_URL);

    HttpResponseMessage response = await httpClient.GetAsync(queryUri);

    jsonRes = await response.Content.ReadAsStringAsync(); //String

    this.currentStock = JsonConvert.DeserializeObject<Stock>(jsonRes);

    foreach (var item in currentStock?.results)
    {
      Console.WriteLine($"Highest Price: {item.h}");
      Console.WriteLine($"Closing Price: {item.c}");
      Console.WriteLine($"Lowest Price: {item.l}");
      Console.WriteLine($"Opening Price: {item.o}");
    }

  }

  @* MODELS for Returned JSON *@
  public class Stock
  {
    [JsonPropertyName("results")]
    public Results[]? results { get; set; }
  }

   public class Results
  {
    public string? T { get; set; }
    public double c { get; set; }
    public double h { get; set; }
    public double l { get; set; }
    public double o { get; set; }
    public double t { get; set; }
    public double v { get; set; }
    public double vw { get; set; }

  }

  public class InfoToStringConverter : JsonConverter<string>
  {
    public override string Read(
    ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
      using (var jsonDoc = JsonDocument.ParseValue(ref reader))
      {
        return jsonDoc.RootElement.GetRawText();
      }
    }

    public override void Write(
    Utf8JsonWriter writer, string value, JsonSerializerOptions options)
    {
      throw new NotImplementedException();
    }
  }

}
