@page "/lineGraphs"
@using System.Globalization
@using System.Text.Json.Serialization
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@using System;
@using System.Linq;
@using System.Text.Json.Serialization;
@using System.Text.Json;
@using Newtonsoft.Json
@using System.Collections;
@using System.Collections.Generic;
@using System.Text.RegularExpressions;
@using Newtonsoft.Json.Serialization
@using StockTracker.Data;
@using System.Runtime.Serialization

<div class="col-md-12 my-5" style="background-color: blue;">
    <RadzenChart >
        <RadzenLineSeries Smooth="@smooth" Data="@revenue2019" CategoryProperty="Date" Title="2019"
            LineType="LineType.Dashed" ValueProperty="Revenue">
            <RadzenMarkers MarkerType="MarkerType.Square" />
        </RadzenLineSeries>
        <RadzenCategoryAxis Padding="20" FormatString="{0:MMM}" />
        <RadzenValueAxis Formatter="@FormatAsUSD">
            <RadzenGridLines Visible="true" />
            <RadzenAxisTitle Text="Revenue in USD" />
        </RadzenValueAxis>
    </RadzenChart>
</div>


<link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
<link href="css/site.css" rel="stylesheet" />
<link href="StockTracker.styles.css" rel="stylesheet" />

@code {
    public StockSymbol? mCurrentStock;
    private string? mJsonRes;
    HttpClient httpClient = new HttpClient();

    [Parameter]
    public string? lineGraphSize { get; set; }
    bool smooth = false;
    class DataItem
    {
        public DateTime Date { get; set; }
        public double Revenue { get; set; }
    }

    string FormatAsUSD(object value)
    {
        return ((double)value).ToString("C0", CultureInfo.CreateSpecificCulture("en-US"));
    }

    DataItem[] revenue2019 = new DataItem[] {
new DataItem
{
Date = DateTime.Parse("2019-01-21"),
Revenue = 234000
},
new DataItem
{
Date = DateTime.Parse("2019-02-21"),
Revenue = 269000
},
new DataItem
{
Date = DateTime.Parse("2019-03-21"),
Revenue = 233000
},
new DataItem
{
Date = DateTime.Parse("2019-04-21"),
Revenue = 244000
},
new DataItem
{
Date = DateTime.Parse("2019-05-21"),
Revenue = 214000
},
new DataItem
{
Date = DateTime.Parse("2019-06-21"),
Revenue = 253000
},
new DataItem
{
Date = DateTime.Parse("2019-07-11"),
Revenue = 274000
},
new DataItem
{
Date = DateTime.Parse("2019-08-21"),
Revenue = 284000
},
new DataItem
{
Date = DateTime.Parse("2019-09-21"),
Revenue = 273000
},
new DataItem
{
Date = DateTime.Parse("2019-10-21"),
Revenue = 282000
},
new DataItem
{
Date = DateTime.Parse("2019-11-21"),
Revenue = 289000
},
new DataItem
{
Date = DateTime.Parse("2019-12-21"),
Revenue = 294000
}
};

    DataItem[] revenue2020 = new DataItem[] {
new DataItem
{
Date = DateTime.Parse("2019-01-21"),
Revenue = 334000
},
new DataItem
{
Date = DateTime.Parse("2019-02-11"),
Revenue = 369000
},
new DataItem
{
Date = DateTime.Parse("2019-03-11"),
Revenue = 333000
},
new DataItem
{
Date = DateTime.Parse("2019-04-11"),
Revenue = 344000
},
new DataItem
{
Date = DateTime.Parse("2019-05-11"),
Revenue = 314000
},
new DataItem
{
Date = DateTime.Parse("2019-06-21"),
Revenue = 353000
},
new DataItem
{
Date = DateTime.Parse("2019-07-01"),
Revenue = 374000
},
new DataItem
{
Date = DateTime.Parse("2019-08-01"),
Revenue = 384000
},
new DataItem
{
Date = DateTime.Parse("2019-09-01"),
Revenue = 373000
},
new DataItem
{
Date = DateTime.Parse("2019-10-01"),
Revenue = 382000
},
new DataItem
{
Date = DateTime.Parse("2019-11-01"),
Revenue = 389000
},
new DataItem
{
Date = DateTime.Parse("2019-12-01"),
Revenue = 394000
}
};

    IEnumerable<int> values = new int[] { 1 };

    void OnChange(IEnumerable<int> value)
    {
        Console.WriteLine($"Value changed to {string.Join(", ", value)}");
    }

    @* Fetch From API *@
    public async Task<StockSymbol> getCurrentDayQuote(string tickerName, string dateFrom, string dateTo)
    {
        
        string api = $"https://api.polygon.io/v2/aggs/ticker/{tickerName}/range/1/month/{dateFrom}/{dateTo}?adjusted=true&sort=asc&limit=5000&apiKey=WuCRrJx5EwrJBBCjO_9FbpPEagQhdpCF";

        string QUERY_URL;

        QUERY_URL = api;

        Uri queryUri = new Uri(QUERY_URL);

        HttpResponseMessage response = await httpClient.GetAsync(queryUri);

        mJsonRes = await response.Content.ReadAsStringAsync();

        mCurrentStock = JsonConvert.DeserializeObject<StockSymbol>(mJsonRes);

        return await Task.FromResult(mCurrentStock);
    }

    @* MODELS for Returned JSON *@
    public class StockSymbol
    {
        [JsonPropertyName("results")]
        public Results[]? results { get; set; }

        [JsonPropertyName("resultsCount")]
        public int? resultsCount { get; set; }

        [JsonPropertyName("status")]
        public string? status { get; set; }
    }

    public class Results
    {
        public string? T { get; set; }
        public double c { get; set; }
        public double h { get; set; }
        public double l { get; set; }
        public double o { get; set; }
        public double t { get; set; }
        public double v { get; set; }
        public double vw { get; set; }
        public string? ticker { get; set; }
    }

}