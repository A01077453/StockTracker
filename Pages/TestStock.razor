@page "/TestStock"
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@using System;
@using System.Linq;
@using System.Text.Json.Serialization;
@using System.Text.Json;
@using Newtonsoft.Json
@using System.Collections;
@using System.Collections.Generic;

@* HTML CONTENT *@
<PageTitle>Test Stock API</PageTitle>


<RadzenDropDownDataGrid TValue="string" Data=@(mTickersList.Select(c => c).Distinct()) Change="@OnChange" /> 
    <RadzenButton Click=@selectTicker Text="Submit" />
     <RadzenButton Click=@selectTickerWithTime Text="selectTickerWithTime" />

<h2> @this.mTickerName </h2>
@* NOTE: Always have a null check to object before PAGE loads, otherwise it will app will crash *@
@if(mCurrentStock != null) {
  @foreach (var stat in mCurrentStock?.results)
  {
    <p>High: @stat.h</p>
    <p>Close: @stat.c</p>
    <p>Opening: @stat.o</p>
    <p>Low: @stat.l</p>
  }
}

<RadzenTemplateForm Data=@this>
  <p>
    <RadzenLabel Component="TickerName" Text="Ticker Name" />
    <RadzenTextBox Name="TickerName" @bind-Value=@this.mTickerName />
    <RadzenRequiredValidator Component="TickerName" Text="First name is required!" />
  </p>
  <p>
    <RadzenLabel Component="Multipler" Text="multipler" />
    <RadzenTextBox Name="Multipler" @bind-Value=@this.mMultipler />
    <RadzenRequiredValidator Component="Multipler" Text="Last name is required!" />
  </p>
   <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Date From" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDatePicker DateFormat="yyyy/MM/dd" style="width: 100%;" Name="DateFrom" @bind-Value=@this.TTimeFrom />
                        </div>
     <div class="col-md-4 align-items-center d-flex">
                            <RadzenLabel Text="Date To" />
                        </div>
                        <div class="col-md-8">
                            <RadzenDatePicker DateFormat="yyyy/MM/dd" style="width: 100%;" Name="DateTo" @bind-Value=@this.TTimeTo />
                        </div>


  <RadzenButton ButtonType="ButtonType.Submit" Click=@selectTickerWithTime Text="Save" />
</RadzenTemplateForm>

@code {
    HttpClient httpClient = new HttpClient();
    private Stock? mCurrentStock;
    private Stock? mSelectedStockWithTime;
    private Stock? mAllTickers;
    private string? mTickerName;
    private string? mJsonRes;
    private List<string>? mTickersList = new List<string>();
    private string? mMultipler;
    private string? mTimeSpan;
   
    private DateTime TTimeFrom;
    private DateTime TTimeTo;
    private string? mTimeFrom;
    private string? mTimeTo;



    protected override async Task OnInitializedAsync()
    {
        await defaultTicker();
        await GetAllTickerNames();
    }

    public async Task<Stock> GetAllTickerNames()
    {

        string allTickerURL = "https://api.polygon.io/v3/reference/tickers?market=stocks&active=true&sort=market&order=asc&limit=1000&apiKey=kjeL6fm92VSB1biHbZJWMpy3fjOqF5T0";
         

        string QUERY_URL;

        QUERY_URL = allTickerURL;

        Uri queryUri = new Uri(QUERY_URL);

        HttpResponseMessage response = await httpClient.GetAsync(queryUri);

        mJsonRes = await response.Content.ReadAsStringAsync(); //String

        mAllTickers = JsonConvert.DeserializeObject<Stock>(mJsonRes);

        string? tickerName;

        for(int i = 0; i < 999; i++)
        {
     
            tickerName = this.mAllTickers.results[i].ticker.ToString();
            mTickersList.Add(tickerName);
        }

    return await Task.FromResult(mAllTickers); 
   
  }

    public async Task<Stock> defaultTicker()
    {

        string ticker = "AAPL";

        string aaplDetail = "https://api.polygon.io/v2/aggs/ticker/" + ticker + "/prev?adjusted=true&apiKey=WuCRrJx5EwrJBBCjO_9FbpPEagQhdpCF";

        @* API CALL: Stock Quote for Previous Day *@
        string QUERY_URL;

        QUERY_URL = aaplDetail;


        Uri queryUri = new Uri(QUERY_URL);

        HttpResponseMessage response = await httpClient.GetAsync(queryUri);

        mJsonRes = await response.Content.ReadAsStringAsync(); //String

        mCurrentStock = JsonConvert.DeserializeObject<Stock>(mJsonRes);


    return await Task.FromResult(mCurrentStock); 
   
  }

   public async Task<Stock> selectTicker()
    {
        string aaplDetail = "https://api.polygon.io/v2/aggs/ticker/" + this.mTickerName + "/prev?adjusted=true&apiKey=WuCRrJx5EwrJBBCjO_9FbpPEagQhdpCF";

        @* API CALL: Stock Quote for Previous Day *@
        string QUERY_URL;

        QUERY_URL = aaplDetail;


        Uri queryUri = new Uri(QUERY_URL);

        HttpResponseMessage response = await httpClient.GetAsync(queryUri);

        mJsonRes = await response.Content.ReadAsStringAsync(); //String

        mCurrentStock = JsonConvert.DeserializeObject<Stock>(mJsonRes);


        return await Task.FromResult(mCurrentStock); 

    }

    public async Task<Stock> selectTickerWithTime()
    {
        Console.WriteLine("TTimeFrom: " + TTimeFrom);
        //mTickerName = "GM";
        //mMultipler = "1";
        mTimeSpan = "month";
        mTimeFrom = TTimeFrom.ToString().Take(10);
        mTimeTo = TTimeTo.ToString().Take(10);

        string selectTickerWithTimeURL = "https://api.polygon.io/v2/aggs/ticker/" + mTickerName  + "/range/" + mMultipler  + "/" + mTimeSpan +"/" + mTimeFrom + "/" + mTimeTo + "?adjusted=true&sort=asc&limit=120&apiKey=kjeL6fm92VSB1biHbZJWMpy3fjOqF5T0";

        @* API CALL: Stock Quote for Previous Day *@
        string QUERY_URL;

        QUERY_URL = selectTickerWithTimeURL;


        Uri queryUri = new Uri(QUERY_URL);

        HttpResponseMessage response = await httpClient.GetAsync(queryUri);

        mJsonRes = await response.Content.ReadAsStringAsync(); //String

        Console.WriteLine("selectTickerWithTime" + mJsonRes);

        mSelectedStockWithTime = JsonConvert.DeserializeObject<Stock>(mJsonRes);


    return await Task.FromResult(mSelectedStockWithTime); 
   
  }


    @* MODELS for Returned JSON *@
    public class Stock
    {
        [JsonPropertyName("results")]
        public Results[]? results { get; set; }
    }

    public class Results
    {
        public string? T { get; set; }
        public double c { get; set; }
        public double h { get; set; }
        public double l { get; set; }
        public double o { get; set; }
        public double t { get; set; }
        public double v { get; set; }
        public double vw { get; set; }
        public string? ticker { get; set; }

  }

  public class InfoToStringConverter : JsonConverter<string>
  {
    public override string Read(
    ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
    {
      using (var jsonDoc = JsonDocument.ParseValue(ref reader))
      {
        return jsonDoc.RootElement.GetRawText();
      }
    }

    public override void Write(
    Utf8JsonWriter writer, string value, JsonSerializerOptions options)
    {
      throw new NotImplementedException();
    }
  }

   void OnChange(object value)
    {
        var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

            this.mTickerName = str.ToString();

    }
     
}
