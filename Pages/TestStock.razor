@page "/TestStock"
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@using System;
@using System.Linq;
@using System.Text.Json.Serialization;
@using System.Text.Json;
@using Newtonsoft.Json
@using System.Collections;
@using System.Collections.Generic;
@using System.Text.RegularExpressions;
@using StockTracker.Data;
@inject StockService stockService;

@* HTML CONTENT *@
<PageTitle>Test Stock API</PageTitle>

<div id="mainContainer">
  <RadzenTemplateForm Data=@this>
    @* Ticker Box *@
    <RadzenAutoComplete Style="width: 100%;" @bind-Value=@this.mTickerName />
    @if (this.errorFlag)
          {
            <RadzenLabel Text=@this.errorMsg style="color: red; font-weight: bold;" />
          }
          @if (this.errorLetterOnlyFlag)
          {
            <RadzenLabel Text=@this.errorMsg style="color: red; font-weight: bold;" />
          }

          @* NOTE: Always have a null check to object before PAGE loads, otherwise it will app will crash *@
    @if (mCurrentStock != null)
          {
            <div id="stockStatisticsContainer">
              <div id="stockTickerName">
                <p><b>@this.mTickerName</b></p>
                <RadzenButton>Add to Favourite</RadzenButton>
              </div>

              <div id="quoteContainer">
                @foreach (var stat in mCurrentStock?.results!)
                {
                  <p>High: @stat.h</p>
                  <p>Close: @stat.c</p>
                  <p>Opening: @stat.o</p>
                  <p>Low: @stat.l</p>
                }
              </div>
            </div>
          }

          <div>
            <RadzenLabel Text="From" />
          </div>
          <div>
            <RadzenDatePicker DateFormat="yyyy-MM-dd" style="width: 100%;" @bind-Value=@this.TTimeFrom />
            @if (this.errorDateFromFlag)
            {
              <RadzenLabel Text=@this.errorMsg style="color: red; font-weight: bold;" />
            }
          </div>
          <div>
            <RadzenLabel Text="To" />
          </div>
          <div>
            <RadzenDatePicker DateFormat="yyyy-MM-dd" style="width: 100%;" @bind-Value=@this.TTimeTo />
            @if (this.errorDateToFlag)
            {
              <RadzenLabel Text=@this.errorMsg style="color: red; font-weight: bold;" />
            }

          </div>
          <br>
          <RadzenSplitButton Click=@submit Text="Submit" style="font-weight: bold;">
            <ChildContent>
              <button @onclick="AddStock">
                <RadzenSplitButtonItem Text="Add Ticker to Favourites" Value="1" Icon="add_task" />
              </button>
            </ChildContent>
          </RadzenSplitButton>
        </RadzenTemplateForm>
      </div>

@code {
  HttpClient httpClient = new HttpClient();
  public StockSymbol? mCurrentStock;
  private StockSymbol? mSelectedStockWithTime;
  private StockSymbol? mAllTickers;
  public string? mTickerName;
  private string? mJsonRes;
  private string? mTickerNameWithTime;
  private List<string>? mTickersList = new List<string>();
  private string? mMultipler;
  private string? mTimeSpan;
  private string? mFavoriteStock;
  private List<string>? mStockTimeSpan = new List<string> { "minute", "hour", "day", "week", "month", "quarter", "year" };
  private DateTime? TTimeFrom;
  private DateTime? TTimeTo;
  private string? mTimeFrom;
  private string? mTimeTo;

  @* ERROR Message *@
  private string? errorMsg;
  private Boolean errorFlag = false;
  private Boolean errorLetterOnlyFlag = false;
  private Boolean errorDateFromFlag = false;
  private Boolean errorDateToFlag = false;

  public async Task? submit()
  {
    @* Flag Reset *@
    this.errorFlag = false;
    this.errorLetterOnlyFlag = false;
    this.errorDateFromFlag = false;
    this.errorDateToFlag = false;

    @* Validates for Non-empty String *@
    if (String.IsNullOrEmpty(this.mTickerName))
    {
      this.errorFlag = !(errorFlag);
      this.errorMsg = "Ticker cannot be empty";
      return;
    }

    @* Validates for Letters Only *@
    if (!Regex.IsMatch(this.mTickerName, @"^[a-zA-Z]+$"))
    {
      this.errorLetterOnlyFlag = !(errorLetterOnlyFlag);
      this.errorMsg = "Ticker must only contain letters";
      return;
    }

    @* Validate the From Date *@
    if (String.IsNullOrEmpty(this.TTimeFrom.ToString()))
    {
      this.errorDateFromFlag = !(this.errorDateFromFlag);
      this.errorMsg = "Date From cannot be empty";
      return;
    }

    @* Validate the To Date *@
    if (String.IsNullOrEmpty(this.TTimeTo.ToString()))
    {
      this.errorDateToFlag = !(this.errorDateToFlag);
      this.errorMsg = "Date To cannot be empty";
      return;
    }

    this.mTimeFrom = TTimeFrom.ToString()!.Substring(0, 9);
    this.mTimeTo = TTimeTo.ToString()!.Substring(0, 9);


    @* Regex to Remove Whitespace and Convert to UpperCase *@
    this.mTickerName = Regex.Replace(this.mTickerName!.ToString()!.ToUpper()!.Trim(), @"\s+", "");

    Console.WriteLine("Test: " + this.mTimeTo + " Ticker Name: " + this.mTickerName);

    await getCurrentDayQuote(this.mTickerName);

  }

  protected override async Task OnInitializedAsync()
  {
    await load(); //Load Favorite Stocks
  }

  @* A helper function that gets the tickerName from search bar and fires API *@
  public async Task<StockSymbol> getCurrentDayQuote(string tickerName)
  {

    @* API Call 1: Get Most Recent Day Quotas *@
    string aaplDetail = "https://api.polygon.io/v2/aggs/ticker/" + tickerName +
        "/prev?adjusted=true&apiKey=WuCRrJx5EwrJBBCjO_9FbpPEagQhdpCF";

    @* API Call 2: Get Chart Data From Selected Dates *@
    @* string chartData = "https://api.polygon.io/v2/aggs/ticker/" + tickerName +
      "/prev?adjusted=true&apiKey=WuCRrJx5EwrJBBCjO_9FbpPEagQhdpCF"; *@

    @* API CALL: Stock Quote for Previous Day *@
    string QUERY_URL;

    QUERY_URL = aaplDetail;

    Uri queryUri = new Uri(QUERY_URL);

    HttpResponseMessage response = await httpClient.GetAsync(queryUri);

    mJsonRes = await response.Content.ReadAsStringAsync(); //String

    mCurrentStock = JsonConvert.DeserializeObject<StockSymbol>(mJsonRes);
      
    return await Task.FromResult(mCurrentStock);
  }

  public async Task<StockSymbol> selectTickerWithTime()
  {
    mTimeFrom = TTimeFrom.ToString().Substring(0, 10);
    mTimeTo = TTimeTo.ToString().Substring(0, 10);

    string selectTickerWithTimeURL = "https://api.polygon.io/v2/aggs/ticker/" + mTickerNameWithTime + "/range/" + "1"
    + "/" + "month" + "/" + mTimeFrom + "/" + mTimeTo +
    "?adjusted=true&sort=asc&limit=50000&apiKey=kjeL6fm92VSB1biHbZJWMpy3fjOqF5T0";


    @* API CALL: Stock Quote for Previous Day *@
    string QUERY_URL;

    QUERY_URL = selectTickerWithTimeURL;

    Uri queryUri = new Uri(QUERY_URL);

    HttpResponseMessage response = await httpClient.GetAsync(queryUri);

    mJsonRes = await response.Content.ReadAsStringAsync(); //String

    mSelectedStockWithTime = JsonConvert.DeserializeObject<StockSymbol>(mJsonRes);

    Console.WriteLine(mJsonRes);

    return await Task.FromResult(mSelectedStockWithTime);
  }


  @* MODELS for Returned JSON *@
  public class StockSymbol
  {
    [JsonPropertyName("results")]
    public Results[]? results { get; set; }

    [JsonPropertyName("resultsCount")]
    public int? resultsCount { get; set; }
  }

  public class Results
  {
    public string? T { get; set; }
    public double c { get; set; }
    public double h { get; set; }
    public double l { get; set; }
    public double o { get; set; }
    public double t { get; set; }
    public double v { get; set; }
    public double vw { get; set; }
    public string? ticker { get; set; }
  }

  @* Stock for SQL LITE *@
  List<Stock>? stocks;
  [CascadingParameter] protected Task<AuthenticationState>? AuthStat { get; set; }
  String? Ticker;
  String? UserId;
  private String? successAddMsg;
  protected async Task load()
  {
    stocks = await stockService.GetStocksAsync();
  }
  protected async Task AddStock()
  {
    var user = (await AuthStat).User;
    UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value!;

    if (String.IsNullOrEmpty(this.mTickerName))
    {
      return;
    }

    Stock s = new Stock()
    {
      ticker = this.mTickerName,
      userId = UserId
    };

    await stockService.InsertStockAsync(s);

    this.successAddMsg = this.mTickerName + " has been successfully added to your favourites!";
  }
}
