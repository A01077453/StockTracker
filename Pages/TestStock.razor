@page "/TestStock"
@inject Microsoft.Extensions.Configuration.IConfiguration config;
@using System;
@using System.Linq;
@using System.Text.Json.Serialization;
@using System.Text.Json;
@using Newtonsoft.Json
@using System.Collections;
@using System.Collections.Generic;

@* HTML CONTENT *@
<PageTitle>Test Stock API</PageTitle>

<RadzenDropDownDataGrid TValue="string" Data=@(mTickersList.Select(c => c).Distinct()) Change="@OnChange" />

@* <RadzenButton Icon="pageview" ButtonStyle="ButtonStyle.Light" Click=@selectTicker Text="" />

<h2> @this.mTickerName <button> "Favourite" </button> </h2> *@

@* NOTE: Always have a null check to object before PAGE loads, otherwise it will app will crash *@
@if (mCurrentStock != null)
{
  <div id="stockStatisticsContainer">
    @foreach (var stat in mCurrentStock?.results)
    {
      <p>High: @stat.h</p>
      <p>Close: @stat.c</p>
      <p>Opening: @stat.o</p>
      <p>Low: @stat.l</p>
    }
  </div>
}

<RadzenTemplateForm Data=@this>
  @* <RadzenLabel Component="mTickerNameWithTime" Text="Ticker Name" />
  <br />
  <RadzenDropDownDataGrid TValue="string" Data=@(mTickersList.Select(c => c).Distinct())
    Change="@OnChangeTickerNameWithTime" />

  <div>
    <RadzenLabel Text="Time Span" />
  </div>

  <RadzenDropDownDataGrid TValue="string" Data=@(mStockTimeSpan.Select(c => c).Distinct())
    Change="@OnChangeTickerTimeSpan" />
  <p>
    <RadzenLabel Component="Multipler" Text="Multipler" />
    <br />
    <RadzenTextBox Name="Multipler" @bind-Value=@this.mMultipler />
    <RadzenRequiredValidator Component="Multipler" Text="Multipler is required!" />
  </p> *@
  
  <div>
    <RadzenLabel Text="From" />
  </div>
  <div>
    <RadzenDatePicker DateFormat="yyyy/MM/dd" style="width: 100%;" Name="DateFrom" @bind-Value=@this.TTimeFrom />
  </div>
  <div>
    <RadzenLabel Text="To" />
  </div>
  <div>
    <RadzenDatePicker DateFormat="yyyy/MM/dd" style="width: 100%;" Name="DateTo" @bind-Value=@this.TTimeTo />
  </div>

  <RadzenButton ButtonStyle="ButtonStyle.Light" ButtonType="ButtonType.Submit"
    Click=@selectTickerWithTime Text="Submit" />
</RadzenTemplateForm>

@code {
  HttpClient httpClient = new HttpClient();
  private Stock? mCurrentStock;
  private Stock? mSelectedStockWithTime;
  private Stock? mAllTickers;
  private string? mTickerName;
  private string? mJsonRes;
  private string? mTickerNameWithTime;
  private List<string>? mTickersList = new List<string>();
  private string? mMultipler;
  private string? mTimeSpan;
  private string? mFavoriteStock;

  private List<string>? mStockTimeSpan = new List<string> {"minute", "hour", "day", "week", "month", "quarter", "year"
};


  private DateTime TTimeFrom;
  private DateTime TTimeTo;
  private string? mTimeFrom;
  private string? mTimeTo;



  protected override async Task OnInitializedAsync()
  {
    await defaultTicker();
    await GetAllTickerNames();
  }

  public async Task<Stock> GetAllTickerNames()
  {

    string allTickerURL =
    "https://api.polygon.io/v3/reference/tickers?market=stocks&active=true&sort=market&order=asc&limit=1000&apiKey=kjeL6fm92VSB1biHbZJWMpy3fjOqF5T0";


    string QUERY_URL;

    QUERY_URL = allTickerURL;

    Uri queryUri = new Uri(QUERY_URL);

    HttpResponseMessage response = await httpClient.GetAsync(queryUri);

    mJsonRes = await response.Content.ReadAsStringAsync(); //String

    mAllTickers = JsonConvert.DeserializeObject<Stock>(mJsonRes);

    string? tickerName;

    for (int i = 0; i < 999; i++)
    {

      tickerName = this.mAllTickers.results[i].ticker.ToString();
      mTickersList.Add(tickerName);
    }

    return await Task.FromResult(mAllTickers);

  }

  public async Task<Stock> defaultTicker()
  {

    string ticker = "AAPL";

    string aaplDetail = "https://api.polygon.io/v2/aggs/ticker/" + ticker +
    "/prev?adjusted=true&apiKey=WuCRrJx5EwrJBBCjO_9FbpPEagQhdpCF";

    @* API CALL: Stock Quote for Previous Day *@
    string QUERY_URL;

    QUERY_URL = aaplDetail;


    Uri queryUri = new Uri(QUERY_URL);

    HttpResponseMessage response = await httpClient.GetAsync(queryUri);

    mJsonRes = await response.Content.ReadAsStringAsync(); //String

    mCurrentStock = JsonConvert.DeserializeObject<Stock>(mJsonRes);


    return await Task.FromResult(mCurrentStock);

  }

  public async Task<Stock> selectTicker()
  {
    string aaplDetail = "https://api.polygon.io/v2/aggs/ticker/" + this.mTickerName +
    "/prev?adjusted=true&apiKey=WuCRrJx5EwrJBBCjO_9FbpPEagQhdpCF";

    @* API CALL: Stock Quote for Previous Day *@
    string QUERY_URL;

    QUERY_URL = aaplDetail;


    Uri queryUri = new Uri(QUERY_URL);

    HttpResponseMessage response = await httpClient.GetAsync(queryUri);

    mJsonRes = await response.Content.ReadAsStringAsync(); //String

    mCurrentStock = JsonConvert.DeserializeObject<Stock>(mJsonRes);


    return await Task.FromResult(mCurrentStock);

  }

  public async Task<Stock> selectTickerWithTime()
  {
    mTimeFrom = TTimeFrom.ToString().Substring(0, 10);
    mTimeTo = TTimeTo.ToString().Substring(0, 10);

    string selectTickerWithTimeURL = "https://api.polygon.io/v2/aggs/ticker/" + mTickerNameWithTime + "/range/" + "1"
    + "/" + "month" + "/" + mTimeFrom + "/" + mTimeTo +
    "?adjusted=true&sort=asc&limit=50000&apiKey=kjeL6fm92VSB1biHbZJWMpy3fjOqF5T0";


    @* API CALL: Stock Quote for Previous Day *@
    string QUERY_URL;

    QUERY_URL = selectTickerWithTimeURL;


    Uri queryUri = new Uri(QUERY_URL);

    HttpResponseMessage response = await httpClient.GetAsync(queryUri);

    mJsonRes = await response.Content.ReadAsStringAsync(); //String

    mSelectedStockWithTime = JsonConvert.DeserializeObject<Stock>(mJsonRes);

    Console.WriteLine(mJsonRes);

    return await Task.FromResult(mSelectedStockWithTime);

  }


  @* MODELS for Returned JSON *@
  public class Stock
  {
    [JsonPropertyName("results")]
    public Results[]? results { get; set; }
  }

  public class Results
  {
    public string? T { get; set; }
    public double c { get; set; }
    public double h { get; set; }
    public double l { get; set; }
    public double o { get; set; }
    public double t { get; set; }
    public double v { get; set; }
    public double vw { get; set; }
    public string? ticker { get; set; }

  }

  void OnChange(object value)
  {
    var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

    this.mTickerName = str.ToString();

  }

  void OnChangeTickerNameWithTime(object value)
  {
    var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

    this.mTickerNameWithTime = str.ToString();

  }

  void OnChangeTickerTimeSpan(object value)
  {
    var str = value is IEnumerable<object> ? string.Join(", ", (IEnumerable<object>)value) : value;

    this.mTimeSpan = str.ToString();

  }


}
